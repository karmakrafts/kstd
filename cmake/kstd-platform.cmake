include_guard()
# Adapted from https://github.com/karmakrafts/cmx/blob/master/cmx-platform.cmake

# Figure out which compiler we're using
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    set(KSTD_COMPILER_CLANG TRUE)
    message(STATUS "Detected Clang compiler")
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    set(KSTD_COMPILER_GCC TRUE)
    message(STATUS "Detected GCC compiler")
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    set(KSTD_COMPILER_MSVC TRUE)
    message(STATUS "Detected MSVC compiler")
else ()
    message(FATAL_ERROR "Unknown or unsupported compiler '${CMAKE_CXX_COMPILER_ID}'")
endif ()

# Figure out what CPU architecture we're dealing with
if (CMAKE_SYSTEM_PROCESSOR MATCHES "[aA][rR][mM]64|[aA][aA]rch64")
    set(KSTD_CPU_ARCH "arm64")
    set(KSTD_CPU_ARM TRUE)
    set(KSTD_CPU_ARM64 TRUE)
    message(STATUS "Detected ARM64 based processor")
elseif (CMAKE_SYSTEM_PROCESSOR MATCHES "[aA][rR][mM]")
    set(KSTD_CPU_ARCH "arm")
    set(KSTD_CPU_ARM TRUE)
    message(STATUS "Detected ARM based processor")
elseif (CMAKE_SYSTEM_PROCESSOR MATCHES "[pP][pP][cC]|[pP]ower[pP][cC]64")
    set(KSTD_CPU_ARCH "ppc64")
    set(KSTD_CPU_PPC TRUE)
    set(KSTD_CPU_PPC64 TRUE)
    message(STATUS "Detected PowerPC64 based processor")
elseif (CMAKE_SYSTEM_PROCESSOR MATCHES "[pP][pP][cC]|[pP]ower[pP][cC]")
    set(KSTD_CPU_ARCH "ppc")
    set(KSTD_CPU_PPC TRUE)
    message(STATUS "Detected PowerPC based processor")
elseif (CMAKE_SYSTEM_PROCESSOR MATCHES "[xX]86[_\-]64|[xX]64|[aA][mM][dD]64")
    set(KSTD_CPU_ARCH "x86_64")
    set(KSTD_CPU_X86 TRUE)
    set(KSTD_CPU_X86_64 TRUE)
    message(STATUS "Detected x86_64 based processor")
elseif (CMAKE_SYSTEM_PROCESSOR MATCHES "[xX]86|i[3456]86")
    set(KSTD_CPU_ARCH "x86")
    set(KSTD_CPU_X86 TRUE)
    message(STATUS "Detected x86 based processor")
elseif (CMAKE_SYSTEM_PROCESSOR MATCHES "[rR]isc[vV]64")
    set(KSTD_CPU_ARCH "riscv64")
    set(KSTD_CPU_RISCV TRUE)
    set(KSTD_CPU_RISCV64 TRUE)
    message(STATUS "Detected RISC-V64 based processor")
elseif (CMAKE_SYSTEM_PROCESSOR MATCHES "[rR]isc[vV]")
    set(KSTD_CPU_ARCH "riscv")
    set(KSTD_CPU_RISCV TRUE)
    message(STATUS "Detected RISC-V based processor")
else ()
    message(FATAL_ERROR "Unsupported processor architecture: ${CMAKE_SYSTEM_PROCESSOR}")
endif () # CMAKE_SYSTEM_PROCESSOR

# Figure out which operating system we're on
# TODO: Add another branch for android
if (WIN32)
    set(KSTD_PLATFORM "Windows")
    set(KSTD_PLATFORM_WINDOWS TRUE)
    set(KSTD_PLATFORM_SLIB_EXT "lib")
    set(KSTD_PLATFORM_DLIB_EXT "dll")
    set(KSTD_PLATFORM_LIB_PREFIX "")
    message(STATUS "Detected Windows operating system")
elseif (APPLE)
    set(KSTD_PLATFORM "MacOS")
    set(KSTD_PLATFORM_MACOS TRUE)
    set(KSTD_PLATFORM_UNIX TRUE)
    set(KSTD_PLATFORM_SLIB_EXT "a")
    set(KSTD_PLATFORM_DLIB_EXT "dylib")
    set(KSTD_PLATFORM_LIB_PREFIX "lib")
    message(STATUS "Detected Mac operating system")
elseif (UNIX)
    if (UNIX AND NOT APPLE)
        set(KSTD_PLATFORM "Linux")
        set(KSTD_PLATFORM_LINUX TRUE)
    else () # UNIX AND NOT APPLE
        set(KSTD_PLATFORM "Unix")
    endif () # UNIX AND NOT APPLE
    set(KSTD_PLATFORM_UNIX TRUE)
    set(KSTD_PLATFORM_SLIB_EXT "a")
    set(KSTD_PLATFORM_DLIB_EXT "so")
    set(KSTD_PLATFORM_LIB_PREFIX "lib")
    message(STATUS "Detected Unixoid operating system")
else ()
    message(FATAL_ERROR "Unsupported target platform '${CMAKE_SYSTEM_NAME}'")
endif ()

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(KSTD_BUILD_TYPE "debug")
    set(KSTD_BUILD_DEBUG ON)
else ()
    set(KSTD_BUILD_RELEASE ON)
    set(KSTD_BUILD_TYPE "release")
endif ()